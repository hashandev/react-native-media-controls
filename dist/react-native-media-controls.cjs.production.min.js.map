{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../src/constants/playerStates.ts","../src/MediaControls.style.ts","../src/utils.ts","../src/Controls.tsx","../src/Slider.tsx","../src/MediaControls.tsx","../src/Toolbar.tsx"],"sourcesContent":["enum PLAYER_STATES {\n  PLAYING = 0,\n  PAUSED = 1,\n  ENDED = 2,\n}\n\nexport { PLAYER_STATES };\n","import { StyleSheet } from \"react-native\";\n\nconst white = \"#fff\";\n\nexport default StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: \"transparent\",\n    bottom: 0,\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"flex-end\",\n    left: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 13,\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  controlsRow: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n  },\n  fullScreenContainer: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n  },\n  playButton: {\n    borderColor: \"white\",\n    height: 40,\n    width: 40,\n    backgroundColor: \"transparent\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"flex-start\",\n    marginRight: 10,\n  },\n  playIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n    alignSelf: \"center\",\n  },\n  progressColumnContainer: {\n    flex: 1,\n  },\n  progressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n  },\n  progressSlider: {\n    alignSelf: \"stretch\",\n    marginTop: 5,\n    marginHorizontal: -15,\n  },\n  replayIcon: {\n    height: 20,\n    resizeMode: \"stretch\",\n    width: 25,\n    color: \"white\",\n  },\n  thumb: {\n    backgroundColor: white,\n    borderRadius: 15 / 2,\n    borderWidth: 3,\n    height: 15,\n    width: 15,\n  },\n  timeRow: {\n    alignSelf: \"stretch\",\n  },\n  timerLabel: {\n    color: white,\n    fontSize: 12,\n  },\n  timerLabelsContainer: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: -7,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"flex-end\",\n  },\n  toolbarRow: {\n    alignItems: \"flex-start\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  track: {\n    borderRadius: 1,\n    height: 5,\n  },\n  controllerContainer: {\n    width: \"100%\",\n    flexDirection: \"row\",\n  },\n});\n","import { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport const humanizeVideoDuration = (seconds: number) => {\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\n  const date = new Date(0);\n\n  date.setSeconds(seconds);\n  return date.toISOString().substr(begin, end);\n};\n\nexport const noop = () => {};\n\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\n  switch (playerState) {\n    case PLAYER_STATES.PAUSED:\n      return require(\"./assets/ic_play_new.png\");\n    case PLAYER_STATES.PLAYING:\n      return require(\"./assets/ic_pause_new.png\");\n    case PLAYER_STATES.ENDED:\n      return require(\"./assets/ic_replay.png\");\n    default:\n      return null;\n  }\n};\n\nexport const getPlayerVolume = (volume: number) => {\n  switch (volume) {\n    case 0:\n      return require(\"./assets/ic_volume_mute.png\");\n    case 0.5:\n      return require(\"./assets/ic_volume_medium.png\");\n    case 1:\n      return require(\"./assets/ic_volume_high.png\");\n  }\n};\n","import React from \"react\";\nimport { TouchableOpacity, View, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { getPlayerStateIcon, getPlayerVolume } from \"./utils\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\ntype ControlsProps = Pick<\n  Props,\n  \"isLoading\" | \"mainColor\" | \"playerState\" | \"onReplay\"\n> & {\n  onPause: () => void;\n  onVolumePress: () => void;\n  volume: number;\n};\n\nconst Controls = (props: ControlsProps) => {\n  const { playerState, volume, onReplay, onPause, onVolumePress } = props;\n  const icon = getPlayerStateIcon(playerState);\n  const volumeIcon = getPlayerVolume(volume);\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\n  const handleVolumeActionPress = () => {\n    onVolumePress();\n  };\n\n  const content = (\n    <View style={styles.controllerContainer}>\n      <TouchableOpacity\n        style={[styles.playButton]}\n        activeOpacity={1}\n        onPress={pressAction}\n        accessibilityLabel={\n          PLAYER_STATES.PAUSED ? \"Tap to Play\" : \"Tap to Pause\"\n        }\n        accessibilityHint=\"Plays and Pauses the Video\"\n      >\n        <Image source={icon} style={styles.playIcon} />\n      </TouchableOpacity>\n      <TouchableOpacity\n        style={[styles.playButton]}\n        onPress={handleVolumeActionPress}\n        activeOpacity={1}\n        accessibilityLabel={\n          volume === 0\n            ? \"Player muted\"\n            : volume === 0.5\n            ? \"Player volume medium\"\n            : \"Player volume high\"\n        }\n        accessibilityHint=\"Indicates player volume\"\n      >\n        <Image source={volumeIcon} style={styles.playIcon} />\n      </TouchableOpacity>\n    </View>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { Controls };\n","import React from \"react\";\nimport { TouchableOpacity, View, Text, Image, ViewStyle } from \"react-native\";\n// import RNSlider from \"react-native-slider\";\nimport RNSlider from \"@react-native-community/slider\";\nimport {} from \"react\";\nimport styles from \"./MediaControls.style\";\nimport { humanizeVideoDuration } from \"./utils\";\nimport { Props as MediaControlsProps } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport type CustomSliderStyle = {\n  containerStyle: ViewStyle;\n  trackStyle: ViewStyle;\n  thumbStyle: ViewStyle;\n};\n\ntype Props = Pick<\n  MediaControlsProps,\n  | \"progress\"\n  | \"duration\"\n  | \"mainColor\"\n  | \"onFullScreen\"\n  | \"playerState\"\n  | \"onSeek\"\n  | \"onSeeking\"\n> & {\n  onPause: () => void;\n  customSliderStyle?: CustomSliderStyle;\n};\n\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\n\nconst Slider = (props: Props) => {\n  const {\n    customSliderStyle,\n    duration,\n    mainColor,\n    onFullScreen,\n    onPause,\n    progress,\n  } = props;\n\n  const containerStyle = customSliderStyle?.containerStyle || {};\n  // const customTrackStyle = customSliderStyle?.trackStyle || {};\n  // const customThumbStyle = customSliderStyle?.thumbStyle || {};\n\n  const dragging = (value: number) => {\n    const { onSeeking, playerState } = props;\n    onSeeking(value);\n\n    if (playerState === PLAYER_STATES.PAUSED) {\n      return;\n    }\n\n    onPause();\n  };\n\n  const seekVideo = (value: number) => {\n    props.onSeek(value);\n    onPause();\n  };\n\n  return (\n    <View\n      style={[styles.controlsRow, styles.progressContainer, containerStyle]}\n    >\n      <View style={styles.progressColumnContainer}>\n        <View style={[styles.timerLabelsContainer]}>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(progress)}\n          </Text>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(duration)}\n          </Text>\n        </View>\n        <RNSlider\n          style={[styles.progressSlider]}\n          thumbTintColor={mainColor}\n          maximumTrackTintColor={mainColor}\n          onValueChange={dragging}\n          onSlidingComplete={seekVideo}\n          maximumValue={Math.floor(duration)}\n          value={Math.floor(progress)}\n          minimumTrackTintColor={mainColor}\n          disabled={false}\n        />\n      </View>\n      {Boolean(onFullScreen) && (\n        <TouchableOpacity\n          style={styles.fullScreenContainer}\n          onPress={onFullScreen}\n        >\n          <Image source={fullScreenImage} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport { Slider };\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  GestureResponderEvent,\n  ViewStyle,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport { Controls } from \"./Controls\";\nimport { Slider, CustomSliderStyle } from \"./Slider\";\nimport { Toolbar } from \"./Toolbar\";\n\nexport type Props = {\n  children?: React.ReactNode;\n  containerStyle?: ViewStyle;\n  duration: number;\n  fadeOutDelay?: number;\n  isFullScreen: boolean;\n  isLoading: boolean;\n  mainColor: string;\n  onFullScreen?: (event: GestureResponderEvent) => void;\n  onPaused: (playerState: PLAYER_STATES) => void;\n  onReplay: () => void;\n  onSeek: (value: number) => void;\n  onSeeking: (value: number) => void;\n  playerState: PLAYER_STATES;\n  progress: number;\n  showOnStart?: boolean;\n  sliderStyle?: CustomSliderStyle;\n  toolbarStyle?: ViewStyle;\n  volume: number;\n  onVolumeChange: () => void;\n};\n\nconst MediaControls = (props: Props) => {\n  const {\n    containerStyle: customContainerStyle = {},\n    duration,\n    fadeOutDelay = 5000,\n    isLoading = false,\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\n    onFullScreen,\n    onReplay: onReplayCallback,\n    onSeek,\n    onSeeking,\n    playerState,\n    progress,\n    showOnStart = true,\n    sliderStyle, // defaults are applied in Slider.tsx\n    onVolumeChange,\n    volume,\n  } = props;\n  const { initialOpacity, initialIsVisible } = (() => {\n    if (showOnStart) {\n      return {\n        initialOpacity: 1,\n        initialIsVisible: true,\n      };\n    }\n\n    return {\n      initialOpacity: 0,\n      initialIsVisible: false,\n    };\n  })();\n\n  const [opacity] = useState(new Animated.Value(initialOpacity));\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n  const [isSliderVisible, setIsSliderVisible] = useState(initialIsVisible);\n\n  const fadeOutControls = (delay = 0) => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 300,\n      delay,\n      useNativeDriver: false,\n    }).start(result => {\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\n      This prevents some flickering */\n      if (result.finished) {\n        setIsVisible(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    fadeOutControls(fadeOutDelay);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleVolumePress = () => {\n    onVolumeChange();\n  };\n\n  const fadeInControls = (loop = true) => {\n    setIsVisible(true);\n    if (!isSliderVisible) {\n      setIsSliderVisible(true);\n    }\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 300,\n      delay: 0,\n      useNativeDriver: false,\n    }).start(() => {\n      if (loop) {\n        fadeOutControls(fadeOutDelay);\n      }\n    });\n  };\n\n  const onReplay = () => {\n    fadeOutControls(fadeOutDelay);\n    onReplayCallback();\n  };\n\n  const cancelAnimation = () => opacity.stopAnimation(() => setIsVisible(true));\n\n  const onPause = () => {\n    const { playerState: pState, onPaused } = props;\n    const { PLAYING, PAUSED, ENDED } = PLAYER_STATES;\n    switch (pState) {\n      case PLAYING: {\n        cancelAnimation();\n        break;\n      }\n      case PAUSED: {\n        fadeOutControls(fadeOutDelay);\n        break;\n      }\n      case ENDED: {\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\n    return onPaused(newPlayerState);\n  };\n\n  const toggleControls = () => {\n    // value is the last value of the animation when stop animation was called.\n    // As this is an opacity effect, I (Charlie) used the value (0 or 1) as a boolean\n    opacity.stopAnimation((value: number) => {\n      setIsVisible(!!value);\n      return value ? fadeOutControls() : fadeInControls();\n    });\n  };\n\n  return (\n    <TouchableWithoutFeedback accessible={false} onPress={toggleControls}>\n      <Animated.View\n        style={[styles.container, customContainerStyle, { opacity }]}\n      >\n        {isVisible && (\n          <View style={[styles.container, customContainerStyle]}>\n            <Slider\n              progress={progress}\n              duration={duration}\n              mainColor={mainColor}\n              onFullScreen={onFullScreen}\n              playerState={playerState}\n              onSeek={onSeek}\n              onSeeking={onSeeking}\n              onPause={onPause}\n              customSliderStyle={sliderStyle}\n            />\n            <Controls\n              onPause={onPause}\n              onReplay={onReplay}\n              isLoading={isLoading}\n              mainColor={mainColor}\n              playerState={playerState}\n              onVolumePress={handleVolumePress}\n              volume={volume}\n            />\n          </View>\n        )}\n      </Animated.View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nMediaControls.Toolbar = Toolbar;\n\nexport default MediaControls;\n","import React from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Toolbar = ({ children }: Props) => <>{children}</>;\n\nexport { Toolbar };\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","backgroundColor","bottom","flex","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","width","fullScreenContainer","alignSelf","paddingLeft","playButton","borderColor","height","marginRight","playIcon","resizeMode","progressColumnContainer","progressContainer","progressSlider","marginTop","marginHorizontal","replayIcon","color","thumb","borderRadius","borderWidth","timeRow","timerLabel","fontSize","timerLabelsContainer","marginBottom","toolbar","toolbarRow","track","controllerContainer","humanizeVideoDuration","seconds","begin","end","date","Date","setSeconds","toISOString","substr","Controls","props","playerState","volume","onReplay","onPause","onVolumePress","icon","PAUSED","require","PLAYING","ENDED","getPlayerStateIcon","volumeIcon","getPlayerVolume","pressAction","content","React","View","style","styles","TouchableOpacity","activeOpacity","onPress","accessibilityLabel","accessibilityHint","Image","source","fullScreenImage","Slider","customSliderStyle","duration","mainColor","onFullScreen","progress","containerStyle","Text","RNSlider","thumbTintColor","maximumTrackTintColor","onValueChange","value","onSeeking","onSlidingComplete","onSeek","maximumValue","Math","floor","minimumTrackTintColor","disabled","Boolean","MediaControls","customContainerStyle","fadeOutDelay","isLoading","onReplayCallback","showOnStart","sliderStyle","onVolumeChange","initialOpacity","initialIsVisible","opacity","useState","Animated","Value","isVisible","setIsVisible","isSliderVisible","setIsSliderVisible","fadeOutControls","delay","timing","toValue","useNativeDriver","start","result","finished","useEffect","onPaused","stopAnimation","TouchableWithoutFeedback","accessible","loop","Toolbar","children"],"mappings":"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"}